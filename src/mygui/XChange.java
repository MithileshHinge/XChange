/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mygui;

import data.ListItemDownload;
import data.ListItemShared;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mithileshhinge
 */
public class XChange extends javax.swing.JFrame {
    
    private static String host = "172.16.1.3"; //Host IP Address
    private static final int port = 9760;
    private static byte receivedCurVer;
    private static final byte  curVer = 1, 
            BYTE_ADD = 5, //done
            BYTE_REMOVE = 6, //done
            BYTE_GET_DOWNLOAD_LIST = 7, //done
            BYTE_LOGIN = 8, //done
            BYTE_SIGNUP = 9, //done
            BYTE_LOGIN_SUCCESSFUL = 10, //done
            BYTE_LOGIN_INCORRECT = 11, //done
            BYTE_SIGNUP_USERNAME_ALREADY_USED = 12, //done
            BYTE_SIGNUP_SUCCESSFUL = 13, //done
            BYTE_GET_SHARED_LIST = 14, //done
            BYTE_DOWNLOAD = 15, //done
            BYTE_DOWNLOAD_READY = 16, //done
            BYTE_DOWNLOAD_FAILED_USER_OFFLINE = 17, //done
            BYTE_LOGIN_FAILED = 18, //done
            BYTE_SIGNUP_FAILED = 19, //done
            BYTE_DOWNLOAD_FAILED_FILE_NOT_AVAILABLE = 20,
            BYTE_LISTENING = 21; //done
    private static ArrayList<String[]> listDownload;
    private static Socket socket;
    private static InputStream inMsg;
    private static OutputStream outMsg;
    private static boolean login = false, listening = true;
    private static int token;
    
    /**
     * Creates new form MainFrame
     */
    public XChange() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane2 = new javax.swing.JLayeredPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XChange");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(900, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setEnabled(false);
        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Filename", "Size", "User", "Date", "Untitled"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(460);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(140);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(0);
        }
        jTable1.removeColumn(jTable1.getColumnModel().getColumn(4));

        jButton6.setText("Download");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Refresh List");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Download", jPanel1);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Filename", "Size", "Date", "Untitled", "Filepath"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setToolTipText("");
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(460);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(0);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(0);
        }
        jTable2.removeColumn(jTable2.getColumnModel().getColumn(3));

        jButton3.setText("Add");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Remove");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Remove All");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(0, 47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Share", jPanel4);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("\nHOW TO USE:\n                 -> In \"Share\" tab, click the \"Add\" button.\n\n                 -> Select multiple files which you want to share with other users. Note that this doesn't upload the files\n                       anywhere, it only makes files on your computer available for download. Also, DO NOT remove or replace the\n                       shared file. If you want to do so, please remove it from the \"Share\" tab.\n\n                 -> Click on \"Remove\" button to remove the selected files from \"Share\" tab.\n\n                 -> Click on \"Remove All\" button to remove all the files from \"Share\" tab.\n\n                 -> In \"Download\" tab, select the file which you want to download.\n\n                 -> Click the download button to begin downloading. Make sure that there aren't any square brackets Please DO NOT open, remove, or replace the file while the\n                       download is in progress. This may result in the file being corrupted.\n\n                 -> Note that the Developers or the Institute is not liable for copyright or any other legal issues, since all the file \n                       sharing occurs between two computers. The server is not involved in any way.\n\n                 -> This software is still in beta phase, please be considerate and try not to hack or break stuff. If you encounter any\n                       bugs, feel free to drop a mail at hinge.cs14@iitp.ac.in and help us make this software better.\n                       \n\t\n\t");
        jTextArea1.setFocusable(false);
        jScrollPane3.setViewportView(jTextArea1);

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel6.setText("XChange");

        jLabel7.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel7.setText("v1.0");

        jLabel8.setText("by Mithilesh Hinge");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Help", jPanel3);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Connecting...");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jLabel2.setText("Username:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Password:");

        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sign Up");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Signed up! Please login to continue.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                            .addComponent(jButton2))
                        .addComponent(jLabel3)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1)
                        .addComponent(jPasswordField1)))
                .addGap(50, 50, 50))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(15, 15, 15))
        );

        jLayeredPane2.setLayer(jTabbedPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel1, 1);
        jLayeredPane2.setLayer(jPanel2, 2);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addGap(251, 251, 251)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(257, Short.MAX_VALUE)))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addGap(180, 180, 180)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(190, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Login button clicked
        String username = this.jTextField1.getText();
        String password = new String(this.jPasswordField1.getPassword());
        
        if (username.trim().equals("") || password.trim().equals("")){
            this.jLabel4.setText("Fields cannot be blank.");
            return;
        }
        byte ret = authenticateUser(username, password);
        DataInputStream dinMsg = new DataInputStream(inMsg);
        if(ret == BYTE_LOGIN_SUCCESSFUL){
            afterSuccessfulLogin();
            return;
        }else if (ret == BYTE_LOGIN_FAILED){
            this.jLabel4.setText("Authentication failed. Please try again later.");
        }else if (ret == BYTE_LOGIN_INCORRECT){
            this.jLabel4.setText("Incorrect username or password.");
        }
        
        this.jTextField1.setText("");
        this.jPasswordField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //SignUp button clicked
        String username = this.jTextField1.getText().trim();
        String password = new String(this.jPasswordField1.getPassword());
        
        if (username.equals("") || password.trim().equals("")){
            this.jLabel4.setText("Fields cannot be blank.");
            return;
        }
        byte ret = signUpUser(username, password);
        if (ret == BYTE_SIGNUP_SUCCESSFUL){
            this.jLabel4.setText("Signed up! Please login to continue.");     
        }else if (ret == BYTE_SIGNUP_FAILED){
            this.jLabel4.setText("Sign Up failed. Please try again later.");
        }else if (ret == BYTE_SIGNUP_USERNAME_ALREADY_USED){
            this.jLabel4.setText("Sign Up failed. Username already exists.");
        }
        this.jTextField1.setText("");
        this.jPasswordField1.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try{
            System.out.println("Closing!");
            if (socket != null) socket.close();
        } catch (IOException ex) {
            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Add button clicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        int r = fileChooser.showOpenDialog(this);
        if (r != JFileChooser.APPROVE_OPTION) return;
        File[] files = fileChooser.getSelectedFiles();
        if (files == null) return;
        if (files.length <=0) return;


        //get details of each file
        final String[] units = new String[]{"B", "kB", "MB", "GB", "TB"};
        Date today = Calendar.getInstance().getTime();
        SimpleDateFormat formatter  = new SimpleDateFormat("yyyy/MM/dd");
        for (int i=0; i<files.length; i++){
            File selection = files[i];

            String path = selection.getAbsolutePath();
            String name = selection.getName();
            
            FileInputStream fis = null;
            String size = null;
            try {
                fis = new FileInputStream(selection);
                size = String.valueOf(fis.getChannel().size());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
            }finally {
                try {
                    fis.close();
                } catch (IOException ex) {
                    Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            //convert size from bytes to KB, MB, GB, TB
            long sizeLong = Long.parseLong(size);
            if (sizeLong <=0) size = "0";
            else {
                int digitGroups = (int) (Math.log10(sizeLong)/Math.log10(1024));
                size = new DecimalFormat("#,##0.#").format(sizeLong/Math.pow(1024, digitGroups)) + " " +units[digitGroups];
            }

            String date = formatter.format(today);
            
            try {
                System.out.println("debug0");
                DataOutputStream dOutMsg = new DataOutputStream(outMsg);
                DataInputStream dInMsg = new DataInputStream(inMsg);

                dOutMsg.writeByte(BYTE_ADD);
                dOutMsg.flush();
                System.out.println("debug1");
                BufferedWriter bufWriter = new BufferedWriter(new OutputStreamWriter(outMsg));
                bufWriter.write(path+"\n");
                //bufWriter.flush();
                System.out.println("debug2");
                bufWriter.write(size+"\n");
                //bufWriter.flush();
                System.out.println("debug3");
                bufWriter.write(date+"\n");
                //bufWriter.flush();
                System.out.println("debug4");
                bufWriter.write(name+"\n");
                bufWriter.flush();
                System.out.println("debug5");
                
                while(dInMsg.readByte() != BYTE_LISTENING){
                    
                }
                
                token++;
                DefaultTableModel tableModel = ((DefaultTableModel) jTable2.getModel());
                tableModel.addRow(new String[]{name, size, date, String.valueOf(token), path});
                
                tableModel.fireTableDataChanged();
                
                
            } catch (IOException ex) {
                Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //Remove button clicked
        int[] rows = jTable2.getSelectedRows();
        if (rows == null) return;
        if (rows.length <=0) return;
        Arrays.sort(rows);
        for (int i=0; i<rows.length; i++){
            try {
                int fileId = Integer.parseInt((String)jTable2.getModel().getValueAt(rows[i], 3));
                DataOutputStream dOutMsg = new DataOutputStream(outMsg);
                DataInputStream dInMsg = new DataInputStream(inMsg);

                dOutMsg.writeByte(BYTE_REMOVE);
                dOutMsg.flush();
                dOutMsg.writeInt(fileId);
                dOutMsg.flush();
                
                while(dInMsg.readByte() != BYTE_LISTENING){
                    
                }
                
                ((DefaultTableModel) jTable2.getModel()).removeRow(rows[i]);
                for (int ii=0; ii<rows.length; ii++){
                    rows[ii]--;
                }
                
            } catch (IOException ex) {
                Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Remove All button clicked
        int k = jTable2.getRowCount();
        for (int i=0; i<k; i++){
            try{
                int fileId = Integer.parseInt((String) jTable2.getModel().getValueAt(0, 3));
                DataOutputStream dOutMsg = new DataOutputStream(outMsg);
                DataInputStream dInMsg = new DataInputStream(inMsg);
                
                dOutMsg.writeByte(BYTE_REMOVE);
                dOutMsg.flush();
                dOutMsg.writeInt(fileId);
                dOutMsg.flush();
                
                while(dInMsg.readByte() != BYTE_LISTENING){
                    
                }
                
                ((DefaultTableModel) jTable2.getModel()).removeRow(0);
                
            }catch (IOException ex) {
                Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Download button clicked
        
        jLabel5.setText("");
        
        int row = jTable1.getSelectedRow();
        if (row < 0) return;
        
        try{
            int fileId = Integer.parseInt((String) jTable1.getModel().getValueAt(row, 4));
            String username = (String) jTable1.getModel().getValueAt(row, 2);
            
            DataOutputStream dOutMsg = new DataOutputStream(outMsg);
            DataInputStream dInMsg = new DataInputStream(inMsg);
            
            
            dOutMsg.writeByte(BYTE_DOWNLOAD);
            dOutMsg.flush();
            dOutMsg.writeInt(fileId);
            dOutMsg.flush();
            BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(outMsg));
            bufw.write(username+"\n");
            bufw.flush();
            
            
            
            if (dInMsg.readByte() == BYTE_DOWNLOAD_FAILED_USER_OFFLINE){
                jLabel5.setText("Error: User offline");
                return;
            }
            
            
            int remotePort = dInMsg.readInt();
            BufferedReader bufr = new BufferedReader(new InputStreamReader(inMsg));
            String remoteHost = bufr.readLine();
            
            afterDownloadButtonPressed(remoteHost, remotePort, fileId, row);
            
        }catch (IOException ex) {
            jLabel5.setText("Network Error.");
            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void afterDownloadButtonPressed(String remoteHost, int remotePort, int fileId, int row) throws IOException{
        Socket downloadClient = new Socket(remoteHost, remotePort);
        InputStream inData = downloadClient.getInputStream();
        OutputStream outData = downloadClient.getOutputStream();
        DataOutputStream dOutData = new DataOutputStream(outData);
        DataInputStream dInData = new DataInputStream(inData);
        dOutData.writeInt(fileId);

        if (dInData.readByte() == BYTE_DOWNLOAD_FAILED_FILE_NOT_AVAILABLE){
            jLabel5.setText("File no longer available.");
        }
        
        JFileChooser saveToChooser = new JFileChooser();
        //saveToChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        saveToChooser.setSelectedFile(new File((String) jTable1.getModel().getValueAt(row, 0)));
        int ret = saveToChooser.showSaveDialog(this);
        if (ret != JFileChooser.APPROVE_OPTION) return;
        
        File dir = saveToChooser.getCurrentDirectory();
        
        if (!dir.exists() || !dir.isDirectory()){
            if(!dir.mkdir()){
                jLabel5.setText("Failed to create directory '"+dir.getAbsolutePath()+"'");
            }
        }
        File file = saveToChooser.getSelectedFile();
        String filename;
        if (file.exists()) {
            filename = (String) jTable1.getModel().getValueAt(row, 0);
            file = new File(dir, filename);
        }else {
            filename = file.getName();
        }
        FileOutputStream fos = new FileOutputStream(file);
        byte[] buffer = new byte[16*1024];

        //Downloading file
        jLabel5.setText("Downloading "+filename+" - 0%");
        final long totBytes = dInData.readLong();
        
        new Thread(new Runnable(){
            @Override
            public void run(){
                try {
                    long totBytesRead = 0;
                    int count;
                    while ((count = inData.read(buffer)) > 0){
                        fos.write(buffer, 0, count);
                        totBytesRead += count;
                        int percent = (int) ((((float) totBytesRead)/((float) totBytes))*100);
                        jLabel5.setText("Downloading "+filename+" - "+String.valueOf(percent)+"%");
                    }
                    fos.close();
                    downloadClient.close();
                    jLabel5.setText(filename+" successfully downloaded.");
                } catch (IOException ex) {
                    jLabel5.setText("Network Error.");
                    try {
                        fos.close();
                        downloadClient.close();
                    } catch (IOException ex1) {
                        Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                    
                    Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
        
    }
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Refresh List button clicked
        refreshDownloadList();
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                XChange xc = new XChange();
                xc.setVisible(true);
                xc.jTabbedPane1.setVisible(false);
                xc.jPanel2.setVisible(false);
                xc.jLabel1.setVisible(true);
              
                if (!connectToServer()){
                    xc.jLabel1.setText("Could not connect.");
                    return;
                }
                
                if (receivedCurVer != curVer){
                    xc.jLabel1.setText("<html><body style='text-align: center'>Your version is "+curVer+".0<br>Please update to the latest version "+receivedCurVer+".0");
                    return;
                }
                
                xc.jLabel1.setVisible(false);
                xc.jPanel2.setVisible(true);
                xc.jLabel4.setText("");
            }
        });
    }
    
    private static boolean connectToServer(){
        try {
            socket = new Socket(host, port);
            inMsg = socket.getInputStream();
            outMsg = socket.getOutputStream();
            DataInputStream dinMsg = new DataInputStream(inMsg);
            receivedCurVer = dinMsg.readByte();
            return true;
        } catch (IOException ex) {
            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
    
    private static byte authenticateUser(String username, String password){
        try {
            DataOutputStream doutMsg = new DataOutputStream(outMsg);
            DataInputStream dinMsg = new DataInputStream(inMsg);
            
            doutMsg.writeByte(BYTE_LOGIN);
            doutMsg.flush();
            BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(outMsg));
            bufw.write(username+"\n");
            bufw.flush();
            bufw.write(password+"\n");
            bufw.flush();
            
            
            byte msg = dinMsg.readByte();
            
            
            return msg;
        } catch (IOException ex) {
            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        return BYTE_LOGIN_FAILED;
    }
    
    private static byte signUpUser(String username, String password){
        try {
            DataOutputStream doutMsg = new DataOutputStream(outMsg);
            DataInputStream dinMsg = new DataInputStream(inMsg);
            
            doutMsg.writeByte(BYTE_SIGNUP);
            doutMsg.flush();
            BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(outMsg));
            bufw.write(username+"\n");
            bufw.flush();
            bufw.write(password+"\n");
            bufw.flush();
            
            
            byte msg = dinMsg.readByte();
            return msg;
        } catch (IOException ex) {
            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
        }
        return BYTE_SIGNUP_FAILED;
    }
    
    private void afterSuccessfulLogin(){
        login = true;
        jPanel2.setVisible(false);
        jTabbedPane1.setVisible(true);
        jTabbedPane1.setEnabled(true);
        jTabbedPane1.setSelectedIndex(1);
        
        try{
            DataInputStream dinMsg = new DataInputStream(inMsg);
            DataOutputStream doutMsg = new DataOutputStream(outMsg);
            
            ServerSocket downloadServerSocket = new ServerSocket(0);
            downloadServerSocket.setPerformancePreferences(0, 1, 2);
            doutMsg.writeInt(downloadServerSocket.getLocalPort());
            doutMsg.flush();
            BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(outMsg));
            bufw.write(socket.getLocalAddress().getHostAddress()+"\n");
            bufw.flush();
            
            Thread t = new Thread(new Runnable(){
                @Override
                public void run(){
                    while (true){
                        
                        try {
                            Socket downloadServer = downloadServerSocket.accept();
                            new Thread(new Runnable(){
                                @Override
                                public void run(){
                                    InputStream fileIn = null;
                                    try {
                                        InputStream inData = downloadServer.getInputStream();
                                        OutputStream outData = downloadServer.getOutputStream();
                                        DataInputStream dInData = new DataInputStream(inData);
                                        DataOutputStream dOutData = new DataOutputStream(outData);
                                        int fileId = dInData.readInt();
                                        int row;
                                        for (row=0; row<jTable2.getModel().getRowCount(); row++){
                                            if (fileId == Integer.parseInt((String) jTable2.getModel().getValueAt(row, 3))){
                                                break;
                                            }
                                        }   
                                        if (row >= jTable2.getModel().getRowCount() || row == -1){
                                            dOutData.writeByte(BYTE_DOWNLOAD_FAILED_FILE_NOT_AVAILABLE);
                                            dOutData.flush();
                                            return;
                                        }   
                                        String filepath = (String) jTable2.getModel().getValueAt(row, 4);
                                        File file = new File(filepath);
                                        if (!file.exists()){
                                            dOutData.writeByte(BYTE_DOWNLOAD_FAILED_FILE_NOT_AVAILABLE);
                                            dOutData.flush();
                                            return;
                                        }
                                        dOutData.writeByte(BYTE_DOWNLOAD_READY);
                                        dOutData.flush();
                                        fileIn = new FileInputStream(file);
                                        long totalBytes = file.length();
                                        dOutData.writeLong(totalBytes);
                                        byte[] buffer = new byte[16*1024];
                                        int count;
                                        while ((count = fileIn.read(buffer)) > 0){
                                            outData.write(buffer, 0, count);
                                        }
                                    } catch (IOException ex) {
                                        Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            if (fileIn != null) fileIn.close();
                                            downloadServer.close();
                                        } catch (IOException ex) {
                                            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }
                            }).start();
                            
                        } catch (IOException ex) {
                            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            });
           
            t.start();
            
            token = dinMsg.readInt();
            
            doutMsg.writeByte(BYTE_GET_SHARED_LIST);
            doutMsg.flush();
            
            int noOfFiles = dinMsg.readInt();
            BufferedReader bufr = new BufferedReader(new InputStreamReader(inMsg));
            
            DefaultTableModel tableModel = (DefaultTableModel) jTable2.getModel();
            for (int i=0; i<noOfFiles; i++){
                String filepath = bufr.readLine();
                String filesize = bufr.readLine();
                String filedate = bufr.readLine();
                String fileid = bufr.readLine();
                String filename = bufr.readLine();
                
                tableModel.addRow(new String[]{filename, filesize, filedate, fileid, filepath});
            }
            
            jTable2.setModel(tableModel);
            
            refreshDownloadList();
        } catch (IOException ex) {
            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void refreshDownloadList() {
        try{
            DataOutputStream dOutMsg = new DataOutputStream(outMsg);
            DataInputStream dInMsg = new DataInputStream(inMsg);
            
            dOutMsg.writeByte(BYTE_GET_DOWNLOAD_LIST);
            dOutMsg.flush();
            
            int noOfFiles = dInMsg.readInt();
            BufferedReader bufr = new BufferedReader(new InputStreamReader(inMsg));
            
            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
            tableModel.setRowCount(0);
            for (int i=0; i<noOfFiles; i++){
                String filename = bufr.readLine();
                String username = bufr.readLine();
                String filesize = bufr.readLine();
                String filedate = bufr.readLine();
                String fileid = bufr.readLine();
                
                tableModel.addRow(new String[]{filename, filesize, username, filedate, fileid});
            }
            
            jTable1.setModel(tableModel);
        } catch (IOException ex) {
            Logger.getLogger(XChange.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}

